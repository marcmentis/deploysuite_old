#!/usr/bin/env ruby
require 'gli'
require 'socket'
require 'open3'
require 'logger'
require 'rainbow'


begin # XXX: Remove this begin/rescue before distributing your app
require 'deploysuite'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/deploysuite` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/deploysuite now"
  exit 64
end

include GLI::App
include Deploysuite

program_desc 'Command Suite to facilitate git deployment to DEV, QA and PROD servers'

version Deploysuite::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Absolute Path to App: /path/to/app (future or existing app)'
# default_value 'the default'
arg_name 'host_path'
# flag [:f,:flagname]
flag [:host_path]


desc 'Clone appropriate repo branch and validate user, repo, path, app'
# arg_name 'Describe arguments to clone_new_app here'
command :clone_new_app do |c|
  c.desc 'URL to repo'
  c.default_value 'git@github.com:account/repo'
  c.flag [:repo, :r]
  c.action do |global_options,options,args|
    r = Runner.new
    # Validations
    r.run_valid_user?
    r.run_path_to_host_legal?(global_options[:host_path])
    r.run_app_not_exist?(global_options[:host_path])
    r.run_repo_exists?(options[:repo])
    r.run_secret_config1?(global_options[:host_path])
    # Clone the appropriate branch into the sever
    r.run_clone_branch(options[:repo], global_options[:host_path])

    STDOUT.puts Rainbow("Success: 'Clone_new_app' command completed without error").bright.green
    DeployLog.stdout_log.info {"Success: 'Clone_new_app' command completed without error"}

  end
end

desc 'Clone appropriate repo branch into valid server path'
arg_name 'Describe arguments to clone here'
command :clone_branch do |c|
  c.desc 'Describe a switch to clone_branch'
  c.switch :s

  c.desc 'URL to repo'
  c.default_value 'git@github.com:account/repo'
  c.flag [:repo, :r]
  c.action do |global_options,options,args|

    r = Runner.new
    r.run_clone_branch(options[:repo], global_options[:host_path])

    STDOUT.puts "'Clone_branch' command successfully run"
    DeployLog.stdout_log.info {"'Clone_branch' command successfully run"}
  end
end

desc 'Describe update here'
arg_name 'Describe arguments to update here'
command :update do |c|
  c.action do |global_options,options,args|
    puts "update command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  if $global_host.nil?
    $global_host = global[:host_path]
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
